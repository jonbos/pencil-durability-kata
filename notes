Some thoughts after finishing the degradation logic:
	1. I don't like the way I had to immediately begin integration testing. Maybe I'll have another run at this when I'm finished..I'd like to be able to do more isolated tests of the pencil object.

	2. I'd like to resolve the default durability. Either the pencil should have unlimited durability unless designed otherwise, or I'll do some calculating to try and find a good default. http://towriteamockingbird.blogspot.com <- this will help

------------------------------------------------------


As I build each function, I'm starting by testing that I can instantiate a pencil with the property that will guide the functionality (length, durability, eraser durability). Maybe those tests should be housed in a separate test class eg PencilCreationTests.

------------------------------------------------------

There are several spots in the code where methods take the form of

	if thing_is_false:
		return
	the rest of the method

I am happy with the form of the method, but I wonder if raising an exception would be better than returning nothing (Python returns None here). I'm hesitant to start designing with exceptions when I don't have any kind of interface/CLI code...we'll see how it shakes out.

------------------------------------------------------
I'm going to factor out the eraser to its own class because the pencil class currently has a lot of responsibility. Removing the eraser logic (then adding it back in via composition) seems like a good place to start reducing that responsibility.
------------------------------------------------------
The pencil test class has a lot of sloppy constants. I'm going to decide what a 2hb should have for durability and length and create a class to instantiate the pencil. 
